if(!_flutter)var _flutter={};_flutter.loader=null,function(){"use strict";const e=s(n());function n(){const e=document.querySelector("base");return e&&e.getAttribute("href")||""}function s(e){return e==""?e:e.endsWith("/")?e:`${e}/`}async function t(e,n,s){if(n<0)return e;let o;const i=new Promise((e,i)=>{o=setTimeout(()=>{i(new Error(`${s} took more than ${n}ms to resolve. Moving on.`,{cause:t}))},n)});return Promise.race([e,i]).finally(()=>{clearTimeout(o)})}class o{constructor(e,t="flutter-js"){const n=e||[/\.js$/];window.trustedTypes&&(this.policy=trustedTypes.createPolicy(t,{createScriptURL:function(e){const s=new URL(e,window.location),o=s.pathname.split("/").pop(),i=n.some(e=>e.test(o));if(i)return s.toString();console.error("URL rejected by TrustedTypes policy",t,":",e,"(download prevented)")}}))}}class i{setTrustedTypesPolicy(e){this._ttPolicy=e}loadServiceWorker(n){if(n==null)return console.debug("Null serviceWorker configuration. Skipping."),Promise.resolve();if(!("serviceWorker"in navigator)){let e="Service Worker API unavailable.";return window.isSecureContext||(e+=`
The current context is NOT secure.`,e+=`
Read more: https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts`),Promise.reject(new Error(e))}const{serviceWorkerVersion:o,serviceWorkerUrl:i=`${e}flutter_service_worker.js?v=${o}`,timeoutMillis:a=4e3}=n;let s=i;this._ttPolicy!=null&&(s=this._ttPolicy.createScriptURL(s));const r=navigator.serviceWorker.register(s).then(this._getNewServiceWorker).then(this._waitForServiceWorkerActivation);return t(r,a,"prepareServiceWorker")}async _getNewServiceWorker(e){const t=await e;return!t.active&&(t.installing||t.waiting)?(console.debug("Installing/Activating first service worker."),t.installing||t.waiting):t.active.scriptURL.endsWith(serviceWorkerVersion)?(console.debug("Loading from existing service worker."),t.active):t.update().then(e=>(console.debug("Updating service worker."),e.installing||e.waiting||e.active))}async _waitForServiceWorkerActivation(e){const t=await e;return!t||t.state=="activated"?t?(console.debug("Service worker already active."),Promise.resolve()):Promise.reject(new Error("Cannot activate a null service worker!")):new Promise((e)=>{t.addEventListener("statechange",()=>{t.state=="activated"&&(console.debug("Activated new service worker."),e())})})}}class a{constructor(){this._scriptLoaded=!1}setTrustedTypesPolicy(e){this._ttPolicy=e}async loadEntrypoint(t){const{entrypointUrl:n=`${e}main.dart.js`,onEntrypointLoaded:s}=t||{};return this._loadEntrypoint(n,s)}didCreateEngineInitializer(e){typeof this._didCreateEngineInitializerResolve=="function"&&(this._didCreateEngineInitializerResolve(e),this._didCreateEngineInitializerResolve=null,delete _flutter.loader.didCreateEngineInitializer),typeof this._onEntrypointLoaded=="function"&&this._onEntrypointLoaded(e)}_loadEntrypoint(e,t){const n=typeof t=="function";if(!this._scriptLoaded){this._scriptLoaded=!0;const s=this._createScriptTag(e);if(n)console.debug("Injecting <script> tag. Using callback."),this._onEntrypointLoaded=t,document.body.append(s);else return new Promise((e,t)=>{console.debug("Injecting <script> tag. Using Promises. Use the callback approach instead!"),this._didCreateEngineInitializerResolve=e,s.addEventListener("error",t),document.body.append(s)})}}_createScriptTag(e){const t=document.createElement("script");t.type="application/javascript";let n=e;return this._ttPolicy!=null&&(n=this._ttPolicy.createScriptURL(e)),t.src=n,t}}class r{async loadEntrypoint(e){const{serviceWorker:r,...c}=e||{},n=new o,s=new i;s.setTrustedTypesPolicy(n.policy),await s.loadServiceWorker(r).catch(e=>{console.warn("Exception while loading service worker:",e)});const t=new a;return t.setTrustedTypesPolicy(n.policy),this.didCreateEngineInitializer=t.didCreateEngineInitializer.bind(t),t.loadEntrypoint(c)}}_flutter.loader=new r}()